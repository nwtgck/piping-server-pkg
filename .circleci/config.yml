version: 2
jobs:
  build_executable:
    docker:
      - image: node:10
    steps:
      - checkout
      # (from: https://discuss.circleci.com/t/can-not-get-submodules-to-clone-properly/22120/2)
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update --remote
      - run: npm ci
      - run: npm run build
      - run:
          name: Generate SHA256
          command: sha256sum dist/piping-server* | tee dist/piping-server-sha256.txt
      - persist_to_workspace:
          root: /root/project/dist
          paths:
            - .
  
  working_test:
    docker:
      - image: ubuntu:16.04
    steps:
      - run: apt update && apt install -y curl
      - attach_workspace:
          at: /root/project/dist
      - run:
          name: Working test
          command: |
            set -x
            # Run a server in background
            /root/project/dist/piping-server-linux --http-port=80 &> /var/log/piping-server.log &
            # Get server PID
            server_pid=$!
            # Wait for server running
            sleep 1
            # Create a file to send
            echo 'hello, world' > /tmp/hello.txt
            # Send and wait for a reciever
            curl -T /tmp/hello.txt localhost/mypath &
            # Get data as a file
            curl localhost/mypath > /tmp/download.txt
            # Print downloaded file
            cat  /tmp/download.txt
            # Test the equality
            diff /tmp/hello.txt /tmp/download.txt

            # Print server's log
            cat /var/log/piping-server.log

            # Stop the server
            kill -9 $server_pid
          
  github_release:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - attach_workspace:
          at: /root/project/dist
      # (from: https://circleci.com/blog/publishing-to-github-releases-via-circleci/)
      - run:
          name: "Publish Release on GitHub"
          command: |
            VERSION=$CIRCLE_TAG
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} /root/project/dist/

workflows:
  version: 2
  build:
    jobs:
      - build_executable:
          filters:
            tags:
              only: /.*/
      - working_test:
          requires:
            - build_executable
          filters:
            tags:
              only: /.*/
      - github_release:
          requires:
            - working_test
          filters:
            tags:
              only: /.+/
            branches:
              ignore: /.*/
